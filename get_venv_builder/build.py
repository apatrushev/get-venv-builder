import base64
import click
import os
import pkgutil
import sys
import zlib


LINESEP = os.linesep.encode()
LINE_MARKER = b'VENV_BOOT_DATA = '
POST_CREATE_MARKER = b'POST_CREATE_CODE'
WARNING = '''"""ATTENTION!!!
This is autogenerated file. Please change it
only in case if you know what you are doing
cmd: {}
"""
'''


def encode_bytes(data, first_line_indent=0, line_length=80):
    data = base64.b64encode(data)

    first_len = line_length - first_line_indent
    yield data[:first_len]
    data = data[first_len:]

    lines = (data[i:i+line_length] for i in range(0, len(data), line_length))
    for line in lines:
        yield line


def encode_lines(lines, first_line_indent=0, line_length=80):
    data = LINESEP.join(lines)
    data = zlib.compress(data, 9)
    for line in encode_bytes(data, first_line_indent, line_length):
        yield line


def resource_lines(name):
    data = pkgutil.get_data(__package__, os.path.join('resources', name))
    return iter(data.splitlines())


@click.command()
@click.option('--output', default='get-venv.py', help='Output filename.')
@click.option('--post-code', type=click.File('rb'), help='Path to post create code.')
def main(output, post_code):
    with open(output, 'wb') as target:
        cmdline = ' '.join(['gvb'] + sys.argv[1:])
        target.write(WARNING.format(cmdline).encode())
        for line in resource_lines('get-venv.template.py'):
            if line.startswith(LINE_MARKER):
                target.write(LINE_MARKER)
                target.write(b'"""')

                lines = encode_lines(
                    resource_lines('venv-boot.py'),
                    len(LINE_MARKER) + 3
                )
                for line in lines:
                    target.write(line + LINESEP)
                target.write(b'"""' + LINESEP)
            elif POST_CREATE_MARKER in line and post_code:
                for line in post_code:
                    if line.strip():
                        target.write(b'    ')
                    target.write(line)
            else:
                target.write(line + LINESEP)


if __name__ == '__main__':
    main()
